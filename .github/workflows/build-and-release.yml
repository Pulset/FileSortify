name: 'Build and Release'

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
  TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

jobs:
  build-mac-arm:
    permissions:
      contents: write
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm install

      - name: Generate update JSON
        run: |
          node scripts/generate-update-json.js ${{ github.ref_name }} "FileSortify ${{ github.ref_name }} 版本发布"

      - name: Build the app (macOS ARM)
        run: npm run build-mac-arm

  sign-and-notarize-macos:
    if: contains(github.ref, 'refs/tags/')
    needs: build-mac-arm
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download macOS artifacts
        uses: actions/download-artifact@v3
        with:
          name: macos-latest
          path: ./artifacts

      - name: Import Code-Signing Certificates
        if: matrix.platform == 'macos-latest'
        uses: Apple-Actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

      - name: Sign and Notarize
        if: matrix.platform == 'macos-latest'
        run: |
          # Sign the .app bundle
          codesign --force --options runtime --sign "${{ secrets.APPLE_SIGNING_IDENTITY }}" --deep ./artifacts/*.app

          # Create DMG
          hdiutil create -volname "FileSortify" -srcfolder ./artifacts/*.app -ov -format UDZO FileSortify.dmg

          # Sign DMG
          codesign --force --sign "${{ secrets.APPLE_SIGNING_IDENTITY }}" FileSortify.dmg

          # Notarize
          xcrun notarytool submit FileSortify.dmg --apple-id "${{ secrets.APPLE_ID }}" --password "${{ secrets.APPLE_APP_PASSWORD }}" --team-id "${{ secrets.APPLE_TEAM_ID }}" --wait

          # Staple
          xcrun stapler staple FileSortify.dmg

      - name: Upload signed artifacts
        uses: actions/upload-artifact@v3
        with:
          name: macos-signed
          path: FileSortify.dmg
